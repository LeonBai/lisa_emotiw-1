!obj:pylearn2.train.Train {
    dataset: &train !obj:emotiw.common.datasets.faces.afew2_facetubes.AFEW2FaceTubes {
        which_set: 'train',
        one_hot: 1,
        preproc: ['smooth'],
        size: [48, 48]
    },
    model: !obj:seq_mlp.FrameMax {
        n_classes: &n_classes 7,
        pooling_mode: 0,
        scale: 1,
        input_space: !obj:emotiw.common.datasets.faces.facetubes.FaceTubeSpace {
            shape: [48, 48],
            num_channels: 3,
            axes: ['b', 't', 0, 1, 'c']
        },
        mlp: !obj:pylearn2.models.mlp.MLP {
            layers: [
                !obj:convsigmoid.ConvSigmoid {
                     layer_name: 'h0',
                     output_channels: 64,
                     kernel_shape: [10, 10],
                     pool_type: 'max',
                     pool_shape: [2, 2],
                     pool_stride: [2, 2],
                     irange: .005,
                     max_kernel_norm: 1.892,
                     W_lr_scale: 0.5,
                     b_lr_scale: 0.5,
                 },
                !obj:convsigmoid.ConvSigmoid {
                     layer_name: 'h1',
                     output_channels: 32,
                     kernel_shape: [6, 6],
                     pool_type: 'max',
                     pool_shape: [4, 4],
                     pool_stride: [2, 2],
                     irange: .005,
                     max_kernel_norm: 1.892,
                     W_lr_scale: 0.5,
                     b_lr_scale: 0.5,
                 },
                 !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h2',
                     dim: &last_ndim 600,
                     irange: .005,
                 },
            ],
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [48, 48],
            num_channels: 3,
            axes: ['b', 'c', 0, 1],
            },
        },
        final_layer: !obj:pylearn2.models.mlp.MLP {
        layers: [
            !obj:pylearn2.models.mlp.Softmax {
                 max_col_norm: 1.9365,
                 layer_name: 'y',
                 n_classes: *n_classes,
                 sparse_init: 23,
                 #irange: .005
            }
        ],
        nvis: *last_ndim
        }
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 1,
        learning_rate: 0.01,
        init_momentum: .5,
        monitoring_dataset:
            {
            'train' : *train,
            'valid' : !obj:emotiw.common.datasets.faces.afew2_facetubes.AFEW2FaceTubes {
                        which_set: 'Val',
                        one_hot: 1,
                        preproc: ['smooth'],
                        size: [48, 48]
                },
            },
        cost: !obj:pylearn2.costs.mlp.dropout.Dropout {
            input_include_probs: { 'h0' : .8 },
            input_scales: { 'h0': 1. }
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "${PYLEARN2_TRAIN_DIR}valid_y_misclass",
            prop_decrease: 0.,
            N: 100
        },
        #termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {max_epochs: 1},
        update_callbacks: !obj:pylearn2.training_algorithms.sgd.ExponentialDecay {
            decay_factor: 1.000004,
            min_lr: .000001
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "best.pkl"
        },
        !obj:pylearn2.training_algorithms.sgd.MomentumAdjustor {
            start: 1,
            saturate: 250,
            final_momentum: .8
        }
    ],
    save_path: "${PYLEARN2_TRAIN_DIR}last.pkl",
    save_freq: 4
}
