!obj:pylearn2.train.Train {
    dataset: &train !obj:emotiw.bouthilx.datasets.AFEWFeaturesDataset {
#        base_path: "/data/lisa/data/faces/EmotiWTest/audio_extracted_features",
        base_path: "/data/afew/audio",
        name: "audio_mlp_%%s_%%s.npy",
        xy: ["feats","labels"],
        which_set: 'train',
    },
    model: !obj:pylearn2.models.mlp.MLP {
        layers: [ !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h0',
                     dim: %(hid)d,
                     sparse_init: 1
                  }, !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h1',
                     dim: 35,
                     sparse_init: 1
                  },!obj:pylearn2.models.mlp.Softmax {
                     layer_name: 'y',
                     n_classes: 7,
                     irange: 0.
                 }
                ],
       nvis: 364,
    },
    algorithm: !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: 20,
        learning_rate: %(learning_rate)e,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:emotiw.bouthilx.datasets.AFEWFeaturesDataset {
                    which_set: 'valid',
                    base_path: "/data/afew/audio",
#                    base_path: "/data/lisa/data/faces/EmotiWTest/audio_extracted_features",
                    name: "audio_mlp_%%s_%%s.npy",
                    xy: ["feats","labels"],
                },
            },
        cost: !obj:pylearn2.costs.cost.SumOfCosts { costs: [
            !obj:pylearn2.costs.cost.MethodCost {
                method: 'cost_from_X',
            }, !obj:pylearn2.models.mlp.WeightDecay {
                coeffs: [ %(wd1)f, %(wd2)f, 0.0 ]
            }
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.MonitorBased {
            channel_name: "valid_y_misclass",
            prop_decrease: 0.,
            N: 50
        }
    },
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "${PYLEARN2_TRAIN_FILE_FULL_STEM}_best.pkl"
        },
    ],
}
